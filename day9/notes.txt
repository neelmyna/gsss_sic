Bubble Sort:
Its trivial (simpler, easier) and traditional way of sorting technique. Such kind of technique we call as BRUTE FORCE.

Compare consecutive elements of the array
Assuming we are sorting in increasing order, when the left element (element at lower index) is higher than the next element (right element) then we swap them.
By continuing this till end of un-sorted part of the array, we end up end pushing or bubbling the largest element in its final position.
Once the element is in its final position, we do not disturb it.
Thus it goes into the sorted part of the array.
Thus we must be able to imagine 2 arrays in the given array.

In Bubble sort, we do not check for anything like, if the array is some what or almost sorted. Nor we consider any element to be already in its final position.
We just start sorting (aaplying the logic).
Now, say if the given array is already fully sorted, yet, the Bubble sort algorithm has same number of comparisons when the array is not sorted.

For any sorting technique, the best case scenario is that the array is already sorted.
The worst case scenario is when the given array is already sorted, but we have to sort in reverse order.

In any sorting technique, we must reach/access every element from the unsorted array (given array). So the efficiency of this part of the sorting is O(n)
And we must also have a logic that puts every element in its right position in the array. Efficiency of this is O(n)

n-1  +  n-2  +  n-3  +  ..... 4 + 3 + 2 + 1
= n(n+1)/2
~ n2

Usually, in almost all sorting techniques, the outer loop accesses elements from the unsorted array.
The inner loop does some work such as comparison, shifting elements, finding position etc.

algorithm:
input: array
from 1st element till last in given array do:
    from 1st element till last element in unsorted part of given array do:
        compare consecutive elements:
        if left element is greater than right element then:
            swap the elements

Pseudocode:
Bubble_sort(ARRAY)
for i from 0 to n-2 do:
    for j from 0 to n-2-i do:
        if ARRAY[j] > ARRAY[j+1] then:
            swap: ARRAY[j] , ARRAY[j+1]

def bubble_sort(array)
    for i in range(len(array)-1):
        for j in range(len(array)-1-i):
            if array[j] > array[j+1]:
                array[j] , array[j+1] = array[j+1] , array[j]

WCE: O(n2)
BCE: O(n2)

45  32  23  50  1  11  99  50  30  55
32  23  45  1  11  50  50  30  55  99

1  3   5   8  19

def bubble_sort(array)
    for i in range(len(array)-1):
        sorted = True
        for j in range(len(array)-1-i):
            if array[j] > array[j+1]:
                array[j] , array[j+1] = array[j+1] , array[j]
                sorted = False
        if sorted:
            return

WCE: O(n2)
BCE: O(n)
-------------------------------------------------
Insertion Sort: Decrease and Conquer technique

45  32  23  50   1  11  99  50  30  55
32  45  
1   11  23  30  32  45  50  50  55  99


1   11  23  30  32  45  50  50  55  99
1   11  23  30  32  45  50  50

ele = 50

insertion_sort(ARRAY):
    for i from 1 to n-1 do:
        ele = ARRAY[i] # element to be inserted
        j = i-1 # index of last element in sorted array
        while j >= 0 and ele < ARRAY[j]: # until we reach index 0 or the position to insert new element into sorted array
            ARRAY[j+1] = ARRAY[j] # shift present element in sorted array to next position
            j-- # move back in the sorted array by one position
        ARRAY[j+1] = ele # place/insert the element in its right position
--------------------------------------------------
Logic/algorithm
Efficiencies
Category
Optimization
Application

---------------------------------------------------
45  82  23  50   1  11  99  70  30  55

pivot = ARRAY[0]
j = 1
for i from 1 to n-1 do:
    if pivot < ARRAY[i]
        swap ARRAY[i] with ARRAY[j]
        j++
swap ARRAY[j] with ARRAY[0]

def partition_array(my_list):
    pivot = my_list[0]
    for i in rabge(1, n):
        if pivot < my_list[i]
            my_list[i], my_list[j] = my_list[j], my_list[i]
            j += 1
my_list[0], my_list[j] = my_list[j], my_list[0]